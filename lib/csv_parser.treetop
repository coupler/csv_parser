module CsvParser
  grammar Csv
    include ParserExtensions

    rule records
      first:non_empty_record rest:( record_sep record )*
      {
        def value
          arr = [first.value]
          rest.elements.each do |elt|
            arr << elt.record.value
          end
          arr
        end
      }
      /
      ''
      {
        def value
          []
        end
      }
    end

    rule record
      non_empty_record / empty_record
    end

    rule empty_record
      ''
      {
        def value
          []
        end
      }
    end

    rule non_empty_record
      first:field rest:( field_sep field )*
      {
        def value
          arr = [first.value]
          rest.elements.each do |elt|
            arr << elt.field.value
          end
          arr
        end
      }
    end

    rule field
      quoted_text
      {
        def value
          elements[1..-2].map(&:text_value).join
        end
      }
      /
      unquoted_text
      {
        def value
          elements.map(&:text_value).join
        end
      }
    end

    rule quoted_text
      quote ( !quote . )+ quote
    end

    rule unquoted_text
      ( !field_sep !record_sep . )+
    end

    rule field_sep
      &{ |s| @field_sep_index = 0; true }
      (
        !record_sep
        !quote
        .
        &{ |s|
          if @field_sep_index < field_sep.length &&
             s[2].text_value == field_sep[@field_sep_index]
            @field_sep_index += 1
            true
          else
            false
          end
        }
      )+
      &{ |s| s.map(&:text_value).join == field_sep }
    end

    rule record_sep
      "\n"
    end

    rule quote
      !"\\" '"'
    end
  end
end
