# Autogenerated from a Treetop grammar. Edits may be lost.


module CsvParser
  module Csv
    include Treetop::Runtime

    def root
      @root ||= :records
    end

    include ParserExtensions

    module Records0
      def record_sep
        elements[0]
      end

      def record
        elements[1]
      end

    end

    module Records1
      def first
        elements[0]
      end

      def rest
        elements[2]
      end
    end

    module Records2
      def value
        arr = [first.value]
        rest.elements.each do |elt|
          arr << elt.record.value
        end
        arr
      end
    end

    module Records3
      def value
        []
      end
    end

    def _nt_records
      start_index = index
      if node_cache[:records].has_key?(index)
        cached = node_cache[:records][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      i1, s1 = index, []
      r2 = _nt_non_empty_record
      s1 << r2
      if r2
        i3 = index
        r4 = lambda { |s| @record_length = s[0].value.length; true }.call(s1)
        if r4
          @index = i3
          r3 = instantiate_node(SyntaxNode,input, index...index)
        else
          r3 = nil
        end
        s1 << r3
        if r3
          s5, i5 = [], index
          loop do
            i6, s6 = index, []
            r7 = _nt_record_sep
            s6 << r7
            if r7
              r8 = _nt_record
              s6 << r8
              if r8
                i9 = index
                r10 = lambda { |s|
                          len = s[1].value.length
                          if (allow_empty_record? && len == 0) || len == @record_length
                            true
                          else
                            @failure_description = :missing_fields
                            false
                          end
                        }.call(s6)
                if r10
                  @index = i9
                  r9 = instantiate_node(SyntaxNode,input, index...index)
                else
                  r9 = nil
                end
                s6 << r9
              end
            end
            if s6.last
              r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
              r6.extend(Records0)
            else
              @index = i6
              r6 = nil
            end
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s1 << r5
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Records1)
        r1.extend(Records2)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r0 = r1
      else
        if has_terminal?('', false, index)
          r11 = instantiate_node(SyntaxNode,input, index...(index + 0))
          r11.extend(Records3)
          @index += 0
        else
          terminal_parse_failure('')
          r11 = nil
        end
        if r11
          r0 = r11
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:records][start_index] = r0

      r0
    end

    def _nt_record
      start_index = index
      if node_cache[:record].has_key?(index)
        cached = node_cache[:record][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_non_empty_record
      if r1
        r0 = r1
      else
        r2 = _nt_empty_record
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:record][start_index] = r0

      r0
    end

    module EmptyRecord0
      def value
        []
      end
    end

    def _nt_empty_record
      start_index = index
      if node_cache[:empty_record].has_key?(index)
        cached = node_cache[:empty_record][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?('', false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 0))
        r0.extend(EmptyRecord0)
        @index += 0
      else
        terminal_parse_failure('')
        r0 = nil
      end

      node_cache[:empty_record][start_index] = r0

      r0
    end

    module NonEmptyRecord0
      def field_sep
        elements[0]
      end

      def field
        elements[1]
      end
    end

    module NonEmptyRecord1
      def first
        elements[0]
      end

      def rest
        elements[1]
      end
    end

    module NonEmptyRecord2
      def value
        arr = [first.value]
        rest.elements.each do |elt|
          arr << elt.field.value
        end
        arr
      end
    end

    def _nt_non_empty_record
      start_index = index
      if node_cache[:non_empty_record].has_key?(index)
        cached = node_cache[:non_empty_record][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_field
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3, s3 = index, []
          r4 = _nt_field_sep
          s3 << r4
          if r4
            r5 = _nt_field
            s3 << r5
          end
          if s3.last
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            r3.extend(NonEmptyRecord0)
          else
            @index = i3
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(NonEmptyRecord1)
        r0.extend(NonEmptyRecord2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:non_empty_record][start_index] = r0

      r0
    end

    module Field0
      def value
        elements.map(&:text_value).join
      end
    end

    module Field1
      def value
        elements[1..-2].map(&:text_value).join
      end
    end

    def _nt_field
      start_index = index
      if node_cache[:field].has_key?(index)
        cached = node_cache[:field][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_unquoted_text
      r1.extend(Field0)
      if r1
        r0 = r1
      else
        r2 = _nt_quoted_text
        r2.extend(Field1)
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:field][start_index] = r0

      r0
    end

    module QuotedText0
    end

    module QuotedText1
    end

    module QuotedText2
      def quote
        elements[0]
      end

    end

    def _nt_quoted_text
      start_index = index
      if node_cache[:quoted_text].has_key?(index)
        cached = node_cache[:quoted_text][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_quote
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3, s3 = index, []
          i4 = index
          r5 = _nt_quote
          if r5
            r4 = nil
          else
            @index = i4
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s3 << r4
          if r4
            if index < input_length
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("any character")
              r6 = nil
            end
            s3 << r6
          end
          if s3.last
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            r3.extend(QuotedText0)
          else
            @index = i3
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        if s2.empty?
          @index = i2
          r2 = nil
        else
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        end
        s0 << r2
        if r2
          i7 = index
          r8 = _nt_quote
          if r8
            r7 = r8
          else
            i9, s9 = index, []
            if has_terminal?('', false, index)
              r10 = instantiate_node(SyntaxNode,input, index...(index + 0))
              @index += 0
            else
              terminal_parse_failure('')
              r10 = nil
            end
            s9 << r10
            if r10
              i11 = index
              r12 = lambda { |s| @failure_description = :missing_quote; true }.call(s9)
              if r12
                r11 = nil
              else
                @index = i11
                r11 = instantiate_node(SyntaxNode,input, index...index)
              end
              s9 << r11
            end
            if s9.last
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              r9.extend(QuotedText1)
            else
              @index = i9
              r9 = nil
            end
            if r9
              r7 = r9
            else
              @index = i7
              r7 = nil
            end
          end
          s0 << r7
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(QuotedText2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:quoted_text][start_index] = r0

      r0
    end

    module UnquotedText0
    end

    module UnquotedText1
    end

    def _nt_unquoted_text
      start_index = index
      if node_cache[:unquoted_text].has_key?(index)
        cached = node_cache[:unquoted_text][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        i1, s1 = index, []
        i2 = index
        r3 = _nt_field_sep
        if r3
          r2 = nil
        else
          @index = i2
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r2
        if r2
          i4 = index
          r5 = _nt_record_sep
          if r5
            r4 = nil
          else
            @index = i4
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r4
          if r4
            i6 = index
            i7 = index
            r8 = _nt_quote
            if r8
              r7 = nil
            else
              @index = i7
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            if r7
              r6 = r7
            else
              i9, s9 = index, []
              if has_terminal?('', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 0))
                @index += 0
              else
                terminal_parse_failure('')
                r10 = nil
              end
              s9 << r10
              if r10
                i11 = index
                r12 = lambda { |s| @failure_description = :stray_quote; true }.call(s9)
                if r12
                  r11 = nil
                else
                  @index = i11
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                end
                s9 << r11
              end
              if s9.last
                r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                r9.extend(UnquotedText0)
              else
                @index = i9
                r9 = nil
              end
              if r9
                r6 = r9
              else
                @index = i6
                r6 = nil
              end
            end
            s1 << r6
            if r6
              if index < input_length
                r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("any character")
                r13 = nil
              end
              s1 << r13
            end
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(UnquotedText1)
        else
          @index = i1
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      end

      node_cache[:unquoted_text][start_index] = r0

      r0
    end

    module FieldSep0
    end

    module FieldSep1
    end

    def _nt_field_sep
      start_index = index
      if node_cache[:field_sep].has_key?(index)
        cached = node_cache[:field_sep][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1 = index
      r2 = lambda { |s| @field_sep_index = 0; true }.call(s0)
      if r2
        @index = i1
        r1 = instantiate_node(SyntaxNode,input, index...index)
      else
        r1 = nil
      end
      s0 << r1
      if r1
        s3, i3 = [], index
        loop do
          i4, s4 = index, []
          i5 = index
          r6 = _nt_record_sep
          if r6
            r5 = nil
          else
            @index = i5
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s4 << r5
          if r5
            i7 = index
            r8 = _nt_quote
            if r8
              r7 = nil
            else
              @index = i7
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r7
            if r7
              if index < input_length
                r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("any character")
                r9 = nil
              end
              s4 << r9
              if r9
                i10 = index
                r11 = lambda { |s|
                          if @field_sep_index < field_sep.length &&
                             s[2].text_value == field_sep[@field_sep_index]
                            @field_sep_index += 1
                            true
                          else
                            false
                          end
                        }.call(s4)
                if r11
                  @index = i10
                  r10 = instantiate_node(SyntaxNode,input, index...index)
                else
                  r10 = nil
                end
                s4 << r10
              end
            end
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(FieldSep0)
          else
            @index = i4
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.empty?
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        s0 << r3
        if r3
          i12 = index
          r13 = lambda { |s| s.map(&:text_value).join == field_sep }.call(s0)
          if r13
            @index = i12
            r12 = instantiate_node(SyntaxNode,input, index...index)
          else
            r12 = nil
          end
          s0 << r12
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(FieldSep1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:field_sep][start_index] = r0

      r0
    end

    module RecordSep0
    end

    module RecordSep1
    end

    def _nt_record_sep
      start_index = index
      if node_cache[:record_sep].has_key?(index)
        cached = node_cache[:record_sep][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1 = index
      r2 = lambda { |s| @record_sep_index = 0; true }.call(s0)
      if r2
        @index = i1
        r1 = instantiate_node(SyntaxNode,input, index...index)
      else
        r1 = nil
      end
      s0 << r1
      if r1
        s3, i3 = [], index
        loop do
          i4, s4 = index, []
          if index < input_length
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r5 = nil
          end
          s4 << r5
          if r5
            i6 = index
            r7 = lambda { |s|
                      if @record_sep_index < record_sep.length &&
                         s[0].text_value == record_sep[@record_sep_index]
                        @record_sep_index += 1
                        true
                      else
                        false
                      end
                    }.call(s4)
            if r7
              @index = i6
              r6 = instantiate_node(SyntaxNode,input, index...index)
            else
              r6 = nil
            end
            s4 << r6
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(RecordSep0)
          else
            @index = i4
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.empty?
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        s0 << r3
        if r3
          i8 = index
          r9 = lambda { |s| s.map(&:text_value).join == record_sep }.call(s0)
          if r9
            @index = i8
            r8 = instantiate_node(SyntaxNode,input, index...index)
          else
            r8 = nil
          end
          s0 << r8
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(RecordSep1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:record_sep][start_index] = r0

      r0
    end

    module Quote0
    end

    def _nt_quote
      start_index = index
      if node_cache[:quote].has_key?(index)
        cached = node_cache[:quote][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1 = index
      if has_terminal?("\\", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\\")
        r2 = nil
      end
      if r2
        r1 = nil
      else
        @index = i1
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        if has_terminal?('"', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r3 = nil
        end
        s0 << r3
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Quote0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:quote][start_index] = r0

      r0
    end

  end

  class CsvParser < Treetop::Runtime::CompiledParser
    include Csv
  end

end
